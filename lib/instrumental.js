// Generated by CoffeeScript 1.6.3
(function() {
  var buffer, connect, net, on_ready, queue_api, settings, socket, socket_connected, write_buffer, write_line, _;

  net = require('net');

  _ = require('underscore');

  settings = {
    api_key: false,
    hostname: 'instrumentalapp.com',
    port: 8000,
    timeout: 10000,
    max_queue_size: 100
  };

  buffer = [];

  on_ready = null;

  socket = false;

  socket_connected = false;

  write_line = function(line) {
    return socket.write(line + "\n");
  };

  write_buffer = function() {
    if (buffer.length === 0) {
      return;
    }
    buffer.forEach(function(v, k) {
      return write_line(v);
    });
    return buffer = [];
  };

  queue_api = function(method, args) {
    buffer.push(method + " " + args.join(" "));
    if (buffer.length > settings.max_queue_size) {
      if (!socket_connected) {
        connect();
      }
      if (socket_connected) {
        return write_buffer();
      }
    }
  };

  connect = function() {
    socket = net.createConnection({
      port: settings.port,
      host: settings.hostname
    });
    socket.setEncoding('ascii');
    socket.on('connect', function() {
      return write_line("hello version 1.0\n" + ("authenticate " + settings.api_key));
    });
    socket.on('error', function(err) {
      console.log(err);
      throw err;
    });
    socket.on('close', function(had_error) {
      socket_connected = false;
      if (had_error) {
        return connect();
      }
    });
    return socket.on('data', function(buffer) {
      if (buffer === "ok\nok\n") {
        if (on_ready) {
          on_ready();
        }
        socket_connected = true;
        return write_buffer();
      } else if (("" + buffer).indexOf("fail") > -1) {
        socket_connected = false;
        socket.end();
        throw "Invalid Instrumental App API Key";
      }
    });
  };

  module.exports = {
    setup: function(new_settings, ready) {
      if (ready == null) {
        ready = null;
      }
      on_ready = ready;
      _.extend(settings, new_settings);
      return connect();
    },
    flush: function() {
      return write_buffer();
    },
    increment: function(metric, increment_by, timestamp) {
      if (increment_by == null) {
        increment_by = 1;
      }
      if (timestamp == null) {
        timestamp = null;
      }
      if (timestamp === null) {
        timestamp = Math.round(+new Date() / 1000);
      }
      return queue_api("increment", [metric, increment_by, timestamp]);
    },
    gauge: function(metric, measurement, timestamp) {
      if (timestamp == null) {
        timestamp = null;
      }
      if (timestamp === null) {
        timestamp = Math.round(+new Date() / 1000);
      }
      return queue_api("gauge", [metric, increment_by, timestamp]);
    },
    gauge_absolute: function(metric, measurement, timestamp) {
      if (timestamp == null) {
        timestamp = null;
      }
      if (timestamp === null) {
        timestamp = Math.round(+new Date() / 1000);
      }
      return queue_api("gauge_absolute", [metric, increment_by, timestamp]);
    },
    notice: function(event, duration, timestamp) {
      if (duration == null) {
        duration = 0;
      }
      if (timestamp == null) {
        timestamp = null;
      }
      if (timestamp === null) {
        timestamp = Math.round(+new Date() / 1000);
      }
      return queue_api("notice", [timestamp, duration, event]);
    }
  };

}).call(this);
